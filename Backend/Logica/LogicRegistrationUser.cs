using ForoULAtina.Entidades.Request;
using ForoULAtina.AccesoDatos;
using ForoULAtina.Entidades.Response;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Globalization;
using System.Text.RegularExpressions;


namespace ForoULAtina.Logica
{
    public class LogicRegistrationUser
    {
        public ResponseRegistration CreateUser(RequestRegistation req)
        {
            ResponseRegistration res = new ResponseRegistration();

            try
            {
                //Validation Begins
                
                //We set the result to false as a beginning step
                res.Result = false;
                //Instance of errors
                res.Errors = new List<string>();
                //req.user.Status = true;
                //Empty request
                if (req == null)
                {
                    res.Errors.Add("NULL REQUEST, REVIEW YOUR INFO");
                }
                else
                {
                    //VALIDATE WHAT REQ HAS
                    /*
                     * Only email can be empty:
                     * 
                            Id --> AUTOGENERATED FROM DB
                            Name
                            Number
                            Email ***
                            Password 
                            TypeU
                            Status
                    */
                    if (string.IsNullOrEmpty(req.user.Name))
                    {
                        res.Result = false;
                        res.Errors.Add("PLEASE ENTER YOUR NAME! - NO NAME ERROR");

                    }

                    if (string.IsNullOrEmpty(req.user.Number))
                    {

                        res.Result = false;
                        res.Errors.Add("PLEASE ENTER YOUR NUMBER! - NO NUMBER ERROR");

                    }

                    if (string.IsNullOrEmpty(req.user.Password))
                    {
                        res.Result = false;
                        res.Errors.Add("PLEASE ENTER YOUR Password! - NO Password ERROR");

                    }


                    if (char.IsWhiteSpace(req.user.TypeU))
                    {
                        res.Result = false;
                        res.Errors.Add("PLEASE SELECT YOUR USER TYPE! - NO USER TYPE ERROR");

                    }

                    if (!string.IsNullOrEmpty(req.user.Email))
                    {
                        if (!IsValidEmail(req.user.Email))
                        {
                            res.Result = false;
                            res.Errors.Add("INVALID EMAIL - BAD EMAIL ERROR");
                        }
                    }

                    if (!IsDigitsOnly(req.user.Number))
                    {
                        res.Result = false;
                        res.Errors.Add("INVALID NUMBER - BAD NUMBER ERROR");
                    }

                }

                if (res.Errors.Any())
                {
                    //Al menos un error 
                    res.Result = false;
                }
                else
                {
                    DataClasses1DataContext connect = new DataClasses1DataContext();
                    int? idUser = 0;
                    int? errorIdDB = 0;
                    string ErrorFromDB = "";

                    connect.insertar_usuario(req.user.Name, req.user.Number, req.user.Email, req.user.Password, req.user.TypeU, true, ref idUser, ref errorIdDB , ref ErrorFromDB);
                    
                    if (idUser==0)
                    {
                        res.Errors.Add(ErrorFromDB);
                        res.Result = false;
                    }
                    else
                    {
                        res.Result = true;
                        res.Message = "WELCOME! USER CREATED SUCCESSFULLY!";
                    }
                    


                }

            }
            catch (Exception ex)
            {
                res.Result=false;
                res.Errors.Add(ex.ToString());
                throw;
            }
            return res;
        }

        private static bool IsValidEmail(string email)
        {
            //REF: https://learn.microsoft.com/en-us/dotnet/standard/base-types/how-to-verify-that-strings-are-in-valid-email-format
            if (string.IsNullOrWhiteSpace(email))
                return false;

            try
            {
                // Normalize the domain
                email = Regex.Replace(email, @"(@)(.+)$", DomainMapper,
                                      RegexOptions.None, TimeSpan.FromMilliseconds(200));

                // Examines the domain part of the email and normalizes it.
                string DomainMapper(Match match)
                {
                    // Use IdnMapping class to convert Unicode domain names.
                    var idn = new IdnMapping();

                    // Pull out and process domain name (throws ArgumentException on invalid)
                    string domainName = idn.GetAscii(match.Groups[2].Value);

                    return match.Groups[1].Value + domainName;
                }
            }
            catch (RegexMatchTimeoutException e)
            {
                return false;
            }
            catch (ArgumentException e)
            {
                return false;
            }

            try
            {
                return Regex.IsMatch(email,
                    @"^[^@\s]+@[^@\s]+\.[^@\s]+$",
                    RegexOptions.IgnoreCase, TimeSpan.FromMilliseconds(250));
            }
            catch (RegexMatchTimeoutException)
            {
                return false;
            }
        }

        private bool IsDigitsOnly(string str)
        {
            foreach (char c in str)
            {
                if (c < '0' || c > '9')
                    return false;
            }

            return true;
        }
    }

}

